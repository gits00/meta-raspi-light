Contents:
=========
1. Description
2. Yocto BSP Layer - Raspberry Pi
3. Optional build configuration
    3.A. Compressed deployed files
    3.B. Add purchased license codecs
    3.C. Disable overscan
    3.D. Set overclocking options
    3.E. Video camera support with V4L2 drivers
    3.F. Enable kgdb over console support
    3.G. Boot to U-Boot
    3.H. Image with Initramfs
    3.I. Enable SPI bus
    3.J. Enable I2C
    3.K. Enable PiTFT support
    3.L. Enable UART support
    3.M. Enable Realtime
4. Contribution
5. Maintainers


1. Description
==============

This is a lightweight fork of https://github.com/agherzan/meta-raspberrypi.
It uses VC4/Mesa for graphics acceleration only - no userland or other userspace
software accessing vcos directly.

2. BSP Layer - RaspberryPi
================================

This layer depends on:

URI: git://git.openembedded.org/openembedded-core
branch: master
revision: HEAD

URI: git://git.openembedded.org/meta-openembedded
layers: meta-oe, meta-multimedia
branch: master
revision: HEAD

3. Optional build configuration
===============================

There are a set of ways in which a user can influence different paramenters of the build.
We list here the ones that are closely related to this BSP or specific to it. For the rest
please check: http://www.yoctoproject.org/docs/latest/ref-manual/ref-manual.html

3.A. Compressed deployed files
==============================
1. Overwrite IMAGE_FSTYPES in local.conf
    IMAGE_FSTYPES = "tar.bz2 ext3.xz"
2. Overwrite SDIMG_ROOTFS_TYPE in local.conf
    SDIMG_ROOTFS_TYPE = "ext3.xz"
3. Overwrite SDIMG_COMPRESSION in local.conf
    SDIMG_COMPRESSION = "xz"
*Accommodate the values above to your own needs (ex: ext3 / ext4).

3.B. Add purchased license codecs
=================================
To add you own licenses use variables KEY_DECODE_MPG2 and KEY_DECODE_WVC1 in
local.conf. Example:
KEY_DECODE_MPG2 = "12345678"
KEY_DECODE_WVC1 = "12345678"
You can supply more licenses separated by comma. Example:
KEY_DECODE_WVC1 = "0x12345678,0xabcdabcd,0x87654321"

3.C. Disable overscan
=====================
By default the GPU adds a black border around the video output to compensate for
TVs which cut off part of the image. To disable this set this variable in
local.conf:
DISABLE_OVERSCAN = "1"

3.D. Set overclocking options
=============================
The Raspberry PI can be overclocked. As of now overclocking up to the "Turbo
Mode" is officially supported by the raspbery and does not void warranty.
Check the config.txt for a detailed description of options and modes. Example:
# Turbo mode
ARM_FREQ = "1000"
CORE_FREQ = "500"
SDRAM_FREQ = "500"
OVER_VOLTAGE = "6"

3.E. Video camera support with V4L2 drivers
===========================================
Set this variable to enable support for the video camera (Linux 3.12.4+ required)
VIDEO_CAMERA = "1"

3.F. Enable kgdb over console support
=====================================
To add the kdbg over console (kgdboc) parameter to the kernel command line,
set this variable in local.conf:
ENABLE_KGDB = "1"

3.G. Boot to U-Boot
===================
To have u-boot load kernel image, set in your local.conf
KERNEL_IMAGETYPE = "uImage"

This will make kernel.img be u-boot image which will load uImage.
By default, kernel.img is the actual kernel image (ex. Image).

3.H. Image with Initramfs
=========================
To build an initramfs image :
    Set the yocto variables (in local.conf)
        - INITRAMFS_IMAGE = "<a name for your initramfs image>"
        - INITRAMFS_IMAGE_BUNDLE = "1"

3.I. Enable SPI bus
====================
When using device tree kernels, set this variable to enable the SPI bus
ENABLE_SPI_BUS = "1"

3.J. Enable I2C
===============
When using device tree kernels, set this variable to enable I2C
ENABLE_I2C = "1"

3.K. Enable PiTFT support
=========================
Basic support for using PiTFT screens can be enabled by adding
below in local.conf:

MACHINE_FEATURES += "pitft"
  - This will enable SPI bus and i2c device-trees, it will also setup
    framebuffer for console and x server on PiTFT.

NOTE: To get this working the overlay for the PiTFT model must be build,
      added and specified as well (dtoverlay=<driver> in config.txt)

Below is a list of currently supported PiTFT models in meta-raspberrypi,
the modelname should be added as a MACHINE_FEATURES in local.conf like below:
    - MACHINE_FEATURES += "pitft <modelname>"

List of currently supported models:
    - pitft22
    - pitft28r

3.L. Enable UART
===============

RaspberryPi 1, 2 and CM will have UART console enabled by default.

RaspberryPi 3 does not have the UART enabled by default because this needs a
fixed core frequency and enable_uart wil set it to the minimum. Certain
operations - 60fps h264 decode, high quality deinterlace - which aren't
performed on the ARM may be affected, and we wouldn't want to do that to users
who don't want to use the serial port. Users who want serial console support on
RaspberryPi3 will have to explicitely set in local.conf: ENABLE_UART = "1".

Ref.: https://github.com/raspberrypi/firmware/issues/553
      https://github.com/RPi-Distro/repo/issues/22

3.M. Enable Realtime
=====================

For applying Realtime patches and enabling RT set in your local.conf:
ENABLE_RPI_RT = "1"


4. Contributing
===============

Use github pull requests for contributions


5. Maintainers
==============

Layer maintainer: Andreas MÃ¼ller <schnitzeltony@googlemail.com>
